---
- name: "cert_sync_detection | Get existing certs"
  ansible.builtin.find:
    paths: "{{ openvpn_key_dir }}"
    patterns: "*.csr"
    excludes: "server.csr"
  register: openvpn_existing_cert

# 1. Get list of file from find module
# 2. Extract path attribute from dict list
# 3. Keep only basename
# 4. Remove extension
- name: "cert_sync_detection | Create list of existing client with existing certs"
  ansible.builtin.set_fact:
    openvpn_existing_client: "{{ openvpn_existing_cert.files | map(attribute='path') | map('basename') | map('replace', '.csr', '') | sort }}"
  when: (openvpn_existing_cert.files | length) > 0

# Make difference between 2 list to have only cert to revoke
- name: "cert_sync_detection | Create list of cert to revoke"
  ansible.builtin.set_fact:
    openvpn_cert_sync_revoke: "{{ (openvpn_existing_client | default([])) | difference(openvpn_clients | sort) }}"

- name: "cert_sync_detection | Debug: Certs to revoke (skipped if none)"
  ansible.builtin.debug:
    msg: "Will revoke additional certs: {{ openvpn_cert_sync_revoke | join(', ') }}"
  when: openvpn_cert_sync_revoke | length > 0

- name: "[cert sync] Get existing certs"
  find:
    paths: "{{ openvpn_key_dir }}"
    patterns: "*.crt"
  register: openvpn_existing_cert_crt

# 1. Get list of file from find module
# 2. Extract path attribute from dict list
# 3. Keep only basename
# 4. Remove extension
- name: "[cert sync] Create list of existing client with  existing certs"
  set_fact:
    openvpn_existing_client_crt: "{{ openvpn_existing_cert_crt.files | map(attribute='path') | map('basename') | map('replace', '.crt', '') | sort }}"
  when: openvpn_existing_cert_crt.files | length > 0

- name: "[cert sync] Detect invalid certificate"
  shell: >-
    if ! openssl verify -CAfile ca.crt {{ item }}.crt > /dev/null ; then
      echo {{ item }}
    elif ! openssl x509 -checkend $(( 24*3600*15 )) -noout -in {{ item }}.crt > /dev/null ; then
      echo {{ item }}
    fi
  args:
    chdir: "{{ openvpn_key_dir }}"
    executable: /usr/bin/bash
  register: openvpn_invalid_certificates
  changed_when:
    - openvpn_invalid_certificates.stdout is defined
    - openvpn_invalid_certificates.stdout | length > 0
  loop: "{{ openvpn_existing_client_crt }}"
  loop_control:
    label: "{{ item + ' : ' + (openvpn_invalid_certificates | d({}) | to_yaml) }}"

- name: "[cert sync] detect disable certificate"
  set_fact:
    openvpn_invalid_certs: "{{ openvpn_invalid_certificates.stdout_lines | default([]) }}"
